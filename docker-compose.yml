version: '3.4'

services:
  auth:
    container_name: auth
    image: ${DOCKER_REGISTRY-}auth
    build:
      context: .
      dockerfile: Auth/Dockerfile
    networks:
        - backend
    ports:
        - '10240:25565' 
    environment:
        - 'ASPNETCORE_HTTP_PORTS=25565'
        - 'ASPNETCORE_ENVIRONMENT=Development'
    configs:
      - source: api-servers
        target: /apiServers.json
    
  chatsender:
    container_name: chat-sender
    image: ${DOCKER_REGISTRY-}chatsender
    build:
      context: .
      dockerfile: ChatSender/Dockerfile
    networks:
        - backend
    ports:
        - '10241:25566' 
    environment:
        - 'ASPNETCORE_HTTP_PORTS=25566'
        - 'ASPNETCORE_ENVIRONMENT=Development'
    configs:
      - source: api-servers
        target: /apiServers.json

  user:
    container_name: user
    image: ${DOCKER_REGISTRY-}user
    build:
      context: .
      dockerfile: User/Dockerfile
    networks:
        - backend
    ports:
        - '10242:25567' 
    environment:
        - 'ASPNETCORE_HTTP_PORTS=25567'
        - 'ASPNETCORE_ENVIRONMENT=Development'
    configs:
      - source: api-servers
        target: /apiServers.json

  db_adminer:
    container_name: db-adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
        - backend

  user_db:
    container_name: user-db
    image: mysql
    restart: always
    environment:
      - 'MYSQL_ROOT_PASSWORD=password'
      - 'MYSQL_USER=root'
      - 'MYSQL_TCP_PORT=6381'
    expose:
      - '6381'
    networks:
        - backend
    volumes:
        - db-user-data:/var/lib/mysql

  redis:
    container_name: redis
    image: redis:7.2.4-alpine
    command: redis-server --port 6380
    expose:
        - '6380'
    networks:
        - backend

networks:
  backend:
    driver: bridge

configs:
    api-servers:
        file: ./apiServers.json

volumes:
  db-user-data:


